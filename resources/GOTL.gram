lang -> VALAR_MORGHULIS expr+ VALAR_DOHAERIS
expr -> function_decl|function_call|method_call|assign_expr|cond_expr|while_expr|input_expr|output_expr|return_expr
assign_expr -> DAENERIS VAR ASSIGN_OP assign_value SEMICOLON
assign_value -> value_expr|TYPE|CONST_STRING
value_expr -> VAR|DIGIT|arithm_expr|method_call|function_call
function_decl -> RGLOR FUNCTION OPEN_PARANTH param_list? CLOSE_PARANTH OPEN_BRACKET body CLOSE_BRACKET
param_list -> VAR (COMMA VAR)*
function_call -> FUNCTION OPEN_PARANTH arg_list? CLOSE_PARANTH SEMICOLON
method_call -> VAR METHOD OPEN_PARANTH arg_list? CLOSE_PARANTH SEMICOLON
arg_list -> value_expr (COMMA value_expr|CONST_STRING)*
arithm_expr -> TYRION arithm_body
arithm_body -> OPEN_PARANTH? value_expr (op arithm_body)* CLOSE_PARANTH?
op -> PLUS_MINUS | MULT_DIV
cond_expr -> CERSEI cond_head body
cond_head -> IF_KW logical_head
logical_head -> OPEN_PARANTH logical_expr CLOSE_PARANTH
logical_expr -> value_expr LOGIC_OP value_expr
body -> OPEN_BRACKET expr+ CLOSE_BRACKET
while_expr -> ARYA while_head body
while_head -> WHILE_KW logical_head
input_expr -> YGRITTE (INPUT_OUTPUT_OP VAR)+ SEMICOLON
output_expr -> JON (INPUT_OUTPUT_OP output_value)+ SEMICOLON
output_value -> value_expr|CONST_STRING
return_expr -> RETURN_KW value_expr|CONST_STRING SEMICOLON

VALAR_MORGHULIS -> Valar Morghulis
VALAR_DOHAERIS -> Valar Dohaeris
DAENERIS -> Daeneris:
TYRION -> Tyrion:
CERCEI -> Cercei:
ARYA -> Arya:
RGLOR -> Rglor:
JON -> Jon:
YGRITTE -> Ygritte:
COMMA -> ,
TYPE -> int|str|list|map
FUNCTION -> \@[a-zA-z]+
METHOD -> \.[a-zA-z]+
VAR -> [a-zA-z]+
ASSIGN_OP -> =
DIGIT -> 0|([1-9][0-9]*)
PLUS_MINUS -> +|-
MULT_DIV -> *|/
LOGIC_OP -> >|<|==|>=|<=
CONST_STRING -> "[^"]*"
IF_KW = if
WHILE_KW = while
RETURN_KW = return
OPEN_PARANTH -> (
CLOSE_PARANTH -> )
OPEN_BRACKET -> {
CLOSE_BRACKET -> }
INPUT_OUTPUT_OP -> --
SEMICOLON -> ;
